//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from stParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class stParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UNDER_SCORE_F=1, IF=2, THEN=3, ELSEIF=4, ELSE=5, SEMICORON=6, END_IF=7, 
		ANY_SYM=8, WS=9;
	public const int
		RULE_ifBlock = 0, RULE_expr = 1;
	public static readonly string[] ruleNames = {
		"ifBlock", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNDER_SCORE_F", "IF", "THEN", "ELSEIF", "ELSE", "SEMICORON", "END_IF", 
		"ANY_SYM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static stParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IfBlockContext : ParserRuleContext {
		public IToken _ANY_SYM;
		public IList<IToken> _condition = new List<IToken>();
		public IList<IToken> _proc = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(stParserParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(stParserParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(stParserParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END_IF() { return GetTokens(stParserParser.END_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_IF(int i) {
			return GetToken(stParserParser.END_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICORON() { return GetToken(stParserParser.SEMICORON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY_SYM() { return GetTokens(stParserParser.ANY_SYM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYM(int i) {
			return GetToken(stParserParser.ANY_SYM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(stParserParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(stParserParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(stParserParser.ELSE, 0); }
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IstParserListener typedListener = listener as IstParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IstParserListener typedListener = listener as IstParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstParserVisitor<TResult> typedVisitor = visitor as IstParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			Match(IF);
			State = 5;
			_localctx._ANY_SYM = Match(ANY_SYM);
			_localctx._condition.Add(_localctx._ANY_SYM);
			State = 6;
			Match(THEN);
			State = 7;
			_localctx._ANY_SYM = Match(ANY_SYM);
			_localctx._proc.Add(_localctx._ANY_SYM);
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IF) {
				{
				{
				State = 8;
				ifBlock();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 14;
				Match(ELSEIF);
				State = 15;
				_localctx._ANY_SYM = Match(ANY_SYM);
				_localctx._condition.Add(_localctx._ANY_SYM);
				State = 16;
				Match(THEN);
				State = 17;
				_localctx._ANY_SYM = Match(ANY_SYM);
				_localctx._proc.Add(_localctx._ANY_SYM);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IF) {
					{
					{
					State = 18;
					ifBlock();
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 29;
				Match(ELSE);
				State = 30;
				_localctx._ANY_SYM = Match(ANY_SYM);
				_localctx._condition.Add(_localctx._ANY_SYM);
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IF) {
					{
					{
					State = 31;
					ifBlock();
					}
					}
					State = 36;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 37;
				Match(END_IF);
				}
			}

			State = 40;
			Match(END_IF);
			State = 41;
			Match(SEMICORON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IstParserListener typedListener = listener as IstParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IstParserListener typedListener = listener as IstParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstParserVisitor<TResult> typedVisitor = visitor as IstParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 43;
				ifBlock();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,9,49,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,0,1,0,5,0,10,8,0,10,0,12,0,13,9,
		0,1,0,1,0,1,0,1,0,1,0,5,0,20,8,0,10,0,12,0,23,9,0,5,0,25,8,0,10,0,12,0,
		28,9,0,1,0,1,0,1,0,5,0,33,8,0,10,0,12,0,36,9,0,1,0,3,0,39,8,0,1,0,1,0,
		1,0,1,1,4,1,45,8,1,11,1,12,1,46,1,1,0,0,2,0,2,0,0,52,0,4,1,0,0,0,2,44,
		1,0,0,0,4,5,5,2,0,0,5,6,5,8,0,0,6,7,5,3,0,0,7,11,5,8,0,0,8,10,3,0,0,0,
		9,8,1,0,0,0,10,13,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,26,1,0,0,0,13,
		11,1,0,0,0,14,15,5,4,0,0,15,16,5,8,0,0,16,17,5,3,0,0,17,21,5,8,0,0,18,
		20,3,0,0,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,
		25,1,0,0,0,23,21,1,0,0,0,24,14,1,0,0,0,25,28,1,0,0,0,26,24,1,0,0,0,26,
		27,1,0,0,0,27,38,1,0,0,0,28,26,1,0,0,0,29,30,5,5,0,0,30,34,5,8,0,0,31,
		33,3,0,0,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,
		37,1,0,0,0,36,34,1,0,0,0,37,39,5,7,0,0,38,29,1,0,0,0,38,39,1,0,0,0,39,
		40,1,0,0,0,40,41,5,7,0,0,41,42,5,6,0,0,42,1,1,0,0,0,43,45,3,0,0,0,44,43,
		1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,3,1,0,0,0,6,11,21,
		26,34,38,46
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
