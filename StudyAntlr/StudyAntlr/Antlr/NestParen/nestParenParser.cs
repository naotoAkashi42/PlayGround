//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from nestParen.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class nestParenParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PREN=1, CLOSE_PREN=2, ANY_SYM=3;
	public const int
		RULE_prenBlock = 0, RULE_expr = 1;
	public static readonly string[] ruleNames = {
		"prenBlock", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PREN", "CLOSE_PREN", "ANY_SYM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "nestParen.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static nestParenParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public nestParenParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public nestParenParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PrenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PREN() { return GetToken(nestParenParser.OPEN_PREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PREN() { return GetToken(nestParenParser.CLOSE_PREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY_SYM() { return GetTokens(nestParenParser.ANY_SYM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYM(int i) {
			return GetToken(nestParenParser.ANY_SYM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrenBlockContext[] prenBlock() {
			return GetRuleContexts<PrenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrenBlockContext prenBlock(int i) {
			return GetRuleContext<PrenBlockContext>(i);
		}
		public PrenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prenBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InestParenListener typedListener = listener as InestParenListener;
			if (typedListener != null) typedListener.EnterPrenBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InestParenListener typedListener = listener as InestParenListener;
			if (typedListener != null) typedListener.ExitPrenBlock(this);
		}
	}

	[RuleVersion(0)]
	public PrenBlockContext prenBlock() {
		PrenBlockContext _localctx = new PrenBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_prenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			Match(OPEN_PREN);
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_PREN || _la==ANY_SYM) {
				{
				State = 7;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ANY_SYM:
					{
					State = 5;
					Match(ANY_SYM);
					}
					break;
				case OPEN_PREN:
					{
					State = 6;
					prenBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 12;
			Match(CLOSE_PREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrenBlockContext[] prenBlock() {
			return GetRuleContexts<PrenBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrenBlockContext prenBlock(int i) {
			return GetRuleContext<PrenBlockContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			InestParenListener typedListener = listener as InestParenListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			InestParenListener typedListener = listener as InestParenListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14;
				prenBlock();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_PREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,3,20,2,0,7,0,2,1,7,1,1,0,1,0,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,0,1,
		0,1,1,4,1,16,8,1,11,1,12,1,17,1,1,0,0,2,0,2,0,0,20,0,4,1,0,0,0,2,15,1,
		0,0,0,4,9,5,1,0,0,5,8,5,3,0,0,6,8,3,0,0,0,7,5,1,0,0,0,7,6,1,0,0,0,8,11,
		1,0,0,0,9,7,1,0,0,0,9,10,1,0,0,0,10,12,1,0,0,0,11,9,1,0,0,0,12,13,5,2,
		0,0,13,1,1,0,0,0,14,16,3,0,0,0,15,14,1,0,0,0,16,17,1,0,0,0,17,15,1,0,0,
		0,17,18,1,0,0,0,18,3,1,0,0,0,3,7,9,17
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
